-- PROJETO ORACLE - SISTEMA RH
-- https://github.com/ErickVeronezi

-- VERIFICAR LOGS DE LOGIN
CREATE TABLE AUDITORIA(
	DATA_EVENTO DATE,
	USUARIO VARCHAR2(30),
	TIPO_EVENTO VARCHAR2(30)
);

CREATE OR REPLACE PROCEDURE PRC_LOGPROC IS
BEGIN
	INSERT INTO AUDITORIA(DATA_EVENTO, USUARIO, TIPO_EVENTO)
	VALUES(SYSDATE, USER,'LOGIN');
END PRC_LOGPROC;
/

CREATE OR REPLACE TRIGGER TRG_LOGTRIGGER
	AFTER LOGON ON DATABASE
	CALL PRC_LOGPROC
	/


/*
TRIGGER OPCIONAL CASO NÃO QUEIRA USAR O PROCEDURE ACIMA


CREATE OR REPLACE TRIGGER TRG_FALHA_LOGON
	AFTER SERVERERROR
	ON DATABASE
	BEGIN
		IF(IS_SERVERERROR(1017)) THEN
			INSERT INTO AUDITORIA(DATA_EVENTO, USUARIO, TIPO_EVENTO)
			VALUES(SYSDATE, USER, 'ORA-1017');
		END IF;
	END FALHA_LOGON;
/

*/

-- BACKUP DE TABELA
CREATE TABLESPACE RECURSOS_HUMANOS_BKP
	DATAFILE '/home/oracle/DATA_BKP/RH_01_BKP.DBF'
	SIZE 100M
	AUTOEXTEND ON
	NEXT 100M
	MAXSIZE 4096M;



CREATE TABLE BKP_FUNCIONARIO(
	IDFUNCIONARIO INT,
	NOME_FUNCIONARIO VARCHAR2(50),
	EMAIL_FUNCIONARIO VARCHAR2(50),
	CPF VARCHAR2(14),
	DATA_ADMISSAO DATE,
	SALARIO NUMBER(10,2),
	DATA_BACKUP DATE,
	FK_IDCARGO INT
)TABLESPACE RECURSOS_HUMANOS_BKP;

CREATE OR REPLACE TRIGGER TRG_BKP_FUNCIONARIO
	BEFORE DELETE ON FUNCIONARIO
	FOR EACH ROW
	BEGIN
		INSERT INTO BKP_FUNCIONARIO VALUES
		(:OLD.IDFUNCIONARIO, :OLD.NOME_FUNCIONARIO, :OLD.EMAIL_FUNCIONARIO, :OLD.CPF, :OLD.DATA_ADMISSAO, :OLD.SALARIO, SYSDATE, :OLD.FK_IDCARGO);
	END;
	/



CREATE TABLE BKP_ENDERECO_FUNCIONARIO(
	IDENDERECO_FUNCIONARIO INT,
	RUA VARCHAR2(30),
	NUMERO VARCHAR2(10),
	BAIRRO VARCHAR2(30),
	CIDADE VARCHAR2(30),
	ESTADO CHAR(2),
	CEP CHAR(9),
	FK_IDFUNCIONARIO INT
)TABLESPACE RECURSOS_HUMANOS_BKP;

CREATE OR REPLACE TRIGGER TRG_BKP_ENDERECO_FUNCIONARIO
	BEFORE DELETE ON ENDERECO_FUNCIONARIO
	FOR EACH ROW
	BEGIN
		INSERT INTO BKP_ENDERECO_FUNCIONARIO VALUES
		(:OLD.IDENDERECO_FUNCIONARIO, :OLD.RUA, :OLD.NUMERO, :OLD.BAIRRO, :OLD.CIDADE, :OLD.ESTADO, :OLD.CEP, :OLD.FK_IDFUNCIONARIO);
	END;
	/




-- VALOR MINIMO PARA SALÁRIO
CREATE OR REPLACE TRIGGER TRG_VALIDA_SALARIO
	BEFORE INSERT OR UPDATE ON FUNCIONARIO
	FOR EACH ROW
BEGIN
	IF :NEW.SALARIO < 1500 THEN
		RAISE_APPLICATION_ERROR(-20001, 'Salário não pode ser inferior a 1500.');
	END IF;
END;
/



-- HISTORICO SALÁRIO
CREATE OR REPLACE TRIGGER TR_HISTORICO_SALARIO
AFTER UPDATE OF SALARIO ON FUNCIONARIO
FOR EACH ROW
DECLARE
  v_cargo_atual VARCHAR2(30);
  v_departamento_atual VARCHAR2(30);
BEGIN
  SELECT C.NOME_CARGO, D.NOME_DEPARTAMENTO
  INTO v_cargo_atual, v_departamento_atual
  FROM CARGO C
  JOIN DEPARTAMENTO D ON C.FK_IDDEPARTAMENTO = D.IDDEPARTAMENTO
  WHERE C.IDCARGO = :NEW.FK_IDCARGO;

  INSERT INTO HISTORICO_FUNCIONAL VALUES
  (SEQ_HISTORICO_FUNCIONAL.NEXTVAL, v_cargo_atual, v_cargo_atual, v_departamento_atual, v_departamento_atual,
    :OLD.SALARIO, :NEW.SALARIO, :NEW.IDFUNCIONARIO, :NEW.FK_IDCARGO);
END;
/


-- TRIGGER PARA IMPEDIR DATAS INVÁLIDAS EM FÉRIAS
CREATE OR REPLACE TRIGGER TR_VALIDA_FERIAS
BEFORE INSERT OR UPDATE ON FERIAS
FOR EACH ROW
BEGIN
  IF :NEW.DATA_FIM < :NEW.DATA_INICIO THEN
    RAISE_APPLICATION_ERROR(-20002, 'Data de fim das férias não pode ser anterior à data de início.');
  END IF;
END;
/




-- PONTO FUNCIONARIO
CREATE SEQUENCE SEQ_REGISTRO_PONTO START WITH 1 INCREMENT BY 1;

CREATE TABLE REGISTRO_PONTO (
  ID_PONTO INT PRIMARY KEY,
  IDFUNCIONARIO INT,
  DATA_HORA TIMESTAMP DEFAULT SYSTIMESTAMP,
  TIPO_EVENTO VARCHAR2(10)
);


CREATE OR REPLACE TRIGGER TRG_REGISTRO_PONTO
AFTER LOGON ON DATABASE
DECLARE
  V_ID_FUNCIONARIO INT;
BEGIN
  SELECT IDFUNCIONARIO INTO V_ID_FUNCIONARIO
  FROM FUNCIONARIO
  WHERE EMAIL_FUNCIONARIO = SYS_CONTEXT('USERENV','SESSION_USER');

  INSERT INTO REGISTRO_PONTO (ID_PONTO, IDFUNCIONARIO, TIPO_EVENTO)
  VALUES (SEQ_REGISTRO_PONTO.NEXTVAL, V_ID_FUNCIONARIO,'ENTRADA');

EXCEPTION
  WHEN NO_DATA_FOUND THEN
    NULL;
  WHEN OTHERS THEN
    NULL;
END;
/

-- IMPEDIR PONTOS DUPLICADOS
CREATE OR REPLACE TRIGGER TRG_VALIDA_PONTO
BEFORE INSERT ON REGISTRO_PONTO
FOR EACH ROW
DECLARE
  V_ULTMO_EVENTO VARCHAR2(10);
BEGIN
  SELECT TIPO_EVENTO INTO V_ULTMO_EVENTO
  FROM 	(SELECT TIPO_EVENTO
    	FROM REGISTRO_PONTO
    	WHERE IDFUNCIONARIO = :NEW.IDFUNCIONARIO
    	ORDER BY DATA_HORA DESC)
  		WHERE ROWNUM = 1;

  IF V_ULTMO_EVENTO = :NEW.TIPO_EVENTO THEN
    RAISE_APPLICATION_ERROR(-20003, 'Ponto duplicado.');
  END IF;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    NULL;
END;
/


-- GARANTIR QUE CPF TENHA 11 NUMEROS VALIDOS
CREATE OR REPLACE TRIGGER TRG_VALIDA_CPF
BEFORE INSERT OR UPDATE ON FUNCIONARIO
	FOR EACH ROW
BEGIN
	IF LENGTH(:NEW.CPF) != 11 OR NOT REGEXP_LIKE(:NEW.CPF, '^[0-9]+$') THEN
		RAISE_APPLICATION_ERROR(-20004, 'O CPF deve ter exatamente 11 dígitos.');
	END IF;
END;
/


-- BLOQUEAR EXCLUSÃO DE CARGO
CREATE OR REPLACE TRIGGER TRG_BLOQUEIA_EXCLUSAO_CARGO
BEFORE DELETE ON CARGO
FOR EACH ROW
DECLARE
  v_contador INTEGER;
BEGIN
  SELECT COUNT(*) INTO v_contador
  FROM FUNCIONARIO
  WHERE FK_IDCARGO = :OLD.IDCARGO;

  IF v_contador > 0 THEN
    RAISE_APPLICATION_ERROR(-20005, 'Este cargo está vinculado a um ou mais funcionários e não pode ser excluído.');
  END IF;
END;
/
